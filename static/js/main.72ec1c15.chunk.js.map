{"version":3,"sources":["components/GetFiveDayItems.js","App.js","components/Search.js","components/CurrentWeather.js","components/dayHeader.js","components/DayDetails.js","components/GetFiveDays.js","serviceWorker.js","index.js"],"names":["check","lat","long","SearchBar","dontRef","e","preventDefault","onSubmit","this","className","onChange","props","searchValue","type","placeholder","onClick","searchHandler","Component","CurrentWeather","convertUnix","timeStamp","adjust","offSet","Date","getTimezoneOffset","converted","hours","getHours","minutes","getMinutes","slice","temperature","description","imageSRC","city","country","show","sunrise","sunset","src","height","timezone","DayHeader","day","DayDetails","time","parseInt","icon","GetFiveDayItems","iconGot","getDay","getDate","dayOfWeek","setState","state","timeAdjust","item","weather","prevProps","console","log","GetFiveDay","getFiveDaysFunc","apiString","name","fetch","then","res","json","result","list","date","dt_txt","catch","changeToggle","map","index","main","temp","dt","keyAPI","showPosition","position","coords","latitude","longitude","App","doASearch","location","visib","searchLocation","items","sys","alert","target","value","wrapper","backgroundImage","margin","backgroundRepeat","backgroundSize","maxWidth","navigator","geolocation","getCurrentPosition","style","inner","Search","findLocation","textAlign","Boolean","window","hostname","match","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.72ec1c15.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport '../styles/CurrentWeather.css'\r\nimport DayHeader from \"./dayHeader.js\";\r\nimport DayDetails from \"./DayDetails.js\";\r\n\r\n\r\nlet itemsByHour={}\r\nlet check\r\nclass GetFiveDayItems extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state ={\r\n      temperature: this.props.temperature,\r\n      description: this.props.description\r\n    }\r\n  }\r\n\r\n  convertUnix = (timeStamp, adjust, iconGot) => {\r\n    var tryIt = new Date();\r\n    var offSet = (tryIt.getTimezoneOffset())*60;\r\n    var days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\r\n    var converted = new Date((timeStamp + offSet + adjust) * 1000);\r\n    var day = converted.getDay();\r\n    var dateDay = converted.getDate();\r\n    var hours = converted.getHours();\r\n    var dayOfWeek = days[day];\r\n    this.setState({\r\n      day: dayOfWeek,\r\n      time: hours,\r\n      temperature: this.props.temperature,\r\n      description: this.props.description,\r\n      icon: `./images/${iconGot}.png`\r\n      });\r\n      }\r\n\r\n      componentDidMount(){\r\n        this.convertUnix(this.props.timeStamp, this.props.timeAdjust, this.props.item.weather[0].icon)\r\n      }\r\n\r\n  componentDidUpdate(prevProps){\r\n    console.log();\r\n    if (this.props.temperature !== prevProps.temperature) {\r\n      console.log(\"works\");\r\n       this.convertUnix(this.props.timeStamp, this.props.timeAdjust, this.props.item.weather[0].icon)\r\n   }\r\n      }\r\n\r\n  render() {\r\n\r\n\r\n    if (this.state.day != \"\") {\r\n      if (this.state.day != check) {\r\n        check = this.state.day;\r\n      return(\r\n        <div>\r\n        <DayHeader day={check}/>\r\n        <div className=\"itemFiveCont\">\r\n\r\n          <DayDetails\r\n            time={this.state.time}\r\n            temperature = {this.state.temperature}\r\n            description = {this.state.description}\r\n            icon = {this.state.icon}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      )\r\n      }\r\n    }\r\n\r\n    return (\r\n\r\n      <div className=\"itemFiveCont\">\r\n\r\n        <DayDetails\r\n          time={this.state.time}\r\n          temperature = {this.state.temperature}\r\n          description = {this.state.description}\r\n          icon = {this.state.icon}\r\n        />\r\n      </div>\r\n\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default GetFiveDayItems;\r\n","\nimport React, { Component } from 'react';\nimport SearchBar from \"./components/Search\";\nimport CurrentWeather from \"./components/CurrentWeather\";\nimport './styles/CurrentWeather.css'\nimport GetFiveDay from \"./components/GetFiveDays\";\n\nconst keyAPI = \"579e2e8de9afb7bf477ddac974c208f8\";\n\n\n//get location\n\nlet lat;\nlet long;\nfunction GetLocation() {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(showPosition);\n    } else {\n      console.log(\"Geolocation is not supported by this browser.\");\n    }\n  };\n\nfunction showPosition(position) {\nlat = position.coords.latitude;\nlong = position.coords.longitude;\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props);\n    this.state ={\n      searchLocation: \"\",\n      items: [],\n      temp: \"\",\n      show: false,\n      changeToggle : false\n    }\n  }\n\n\n\n  doASearch = (e, location) => {\n    console.log(\"changes\");\n    console.log(this.state.visib);\n    e.preventDefault();\n    let apiString = \"\"\n    location ? apiString = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${long}&units=metric&appid=${keyAPI}`\n    : apiString = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.searchLocation}&units=metric&appid=${keyAPI}`\n    fetch(apiString)\n    .then(res => res.json())\n    .then(\n      (result) => {\n\n          this.setState({\n          items: result,\n          name: result.name,\n          temp: parseInt(result.main.temp),\n          description: result.weather[0].description,\n          icon: result.weather[0].icon,\n          country: result.sys.country,\n          show: true,\n          sunrise: result.sys.sunrise,\n          sunset: result.sys.sunset,\n          timezone: result.timezone,\n          changeToggle : !this.state.changeToggle\n        });\n      })\n      .catch(() => {\n      alert(`${this.state.searchLocation} is not a valid place`)\n    });\n}\n\nsearchValue = (e) => {\n\n  this.setState({\n    searchLocation: e.target.value,\n    show: false\n  })\n}\n\n\n\n\nrender() {\n  const wrapper = {\n    backgroundImage: `url(./images/bg${this.state.icon}.png)`,\n    margin: \"0\",\n    backgroundRepeat: \"no-repeat\",\n    backgroundSize: \"cover\",\n    maxWidth: \"400px\",\n    margin: \"auto\"\n  }\nGetLocation();\n    return (\n      <div className=\"app-cont\">\n      <div style={wrapper}>\n        <div className=\"overlay\">\n        <div style={inner}>\n\n        <SearchBar searchHandler={this.doASearch} searchValue={this.searchValue} findLocation={this.findLocation}/>\n        <CurrentWeather\n          temperature={this.state.temp}\n          description = {this.state.description}\n          imageSRC = {`./images/${this.state.icon}.png`}\n          city = {this.state.name}\n          country = {this.state.country}\n          show={this.state.show}\n          sunrise={this.state.sunrise}\n          sunset={this.state.sunset}\n          timezone={this.state.timezone}\n        />\n\n        </div>\n      </div>\n\n      </div>\n        <GetFiveDay name = {this.state.name} show = {this.state.show} changeToggle={this.state.changeToggle}/>\n    </div>\n\n\n    );\n  }\n\n}\n\n\n\nconst inner = {\n  textAlign: \"center\"\n}\n\nexport default App;\n","import React, { Component } from 'react';\r\nimport '../styles/CurrentWeather.css'\r\n\r\nclass SearchBar extends Component {\r\n\r\n  dontRef = (e) => {\r\n    e.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    let location = true;\r\n    return (\r\n      <div>\r\n        <form onSubmit={this.dontRef}className=\"locationForm\">\r\n          <input onChange={this.props.searchValue} type=\"text\" placeholder=\"Search Location\"></input>\r\n          <div className=\"serchIcons\">\r\n            <i onClick={this.props.searchHandler} className=\"fas fa-search fa-2x\"></i>\r\n            <i onClick={(e)=>this.props.searchHandler(e, location)} className=\"fas fa-map-marker-alt fa-2x\"></i>\r\n\r\n          </div>\r\n\r\n\r\n\r\n\r\n        </form>\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default SearchBar;\r\n","import React, { Component } from 'react';\r\nimport '../styles/CurrentWeather.css'\r\n\r\nclass CurrentWeather extends Component {\r\n\r\n  convertUnix = (timeStamp, adjust) => {\r\n    var tryIt = new Date();\r\n    var offSet = (tryIt.getTimezoneOffset())*60;\r\n    var converted = new Date((timeStamp + offSet + adjust) * 1000);\r\n    var hours = converted.getHours();\r\n    var minutes = converted.getMinutes();\r\n    if (minutes < 10) {\r\n      minutes = ('0' + minutes).slice(-2)\r\n    }\r\n\r\n    return `${hours}:${minutes}`\r\n      }\r\n\r\n\r\n\r\n  render() {\r\n    const { temperature, description, imageSRC, city, country, show, sunrise, sunset } = this.props;\r\n\r\n\r\n\r\n    if (show) {\r\n      return (\r\n        <div className=\"cwContainer\">\r\n          <h1 className=\"cwContainer\">{city}, {country} </h1>\r\n          <div className=\"suriseCont\">\r\n            <img className=\"\" src=\"/images/sunrise.png\" height=\"20px\"  ></img>\r\n              <p><strong> {this.convertUnix(this.props.sunrise, this.props.timezone)}</strong>       {this.convertUnix(this.props.sunset, this.props.timezone)} </p>\r\n          </div>\r\n          <div className=\"mainData\">\r\n            <img className=\"weatherIconMain\" src={imageSRC} height=\"100px\"  ></img>\r\n            <div className=\"mainDataText\">\r\n              <h1>{temperature}°C</h1>\r\n              <h2>{description}</h2>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n\r\n    }\r\n    return(\r\n      null\r\n    )\r\n\r\n\r\n  }\r\n\r\n}\r\n\r\n\r\n\r\nexport default CurrentWeather;\r\n","import React, { Component } from 'react';\r\nimport '../styles/CurrentWeather.css'\r\n\r\nclass DayHeader extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div><h2 className=\"day-header\">{this.props.day}</h2></div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default DayHeader;\r\n","import React, { Component } from 'react';\r\nimport '../styles/CurrentWeather.css'\r\n\r\nclass DayDetails extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"day-details-cont\">\r\n        <p>{this.props.time}:00</p>\r\n        <p>{parseInt(this.props.temperature)}°C </p>\r\n          <img src={this.props.icon} height=\"22px\"></img>\r\n        <p>{this.props.description}  </p>\r\n\r\n\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\nexport default DayDetails;\r\n","import React, { Component } from 'react';\r\nimport GetFiveDayItems from \"./GetFiveDayItems.js\";\r\nimport '../styles/CurrentWeather.css'\r\n\r\nconst keyAPI = \"579e2e8de9afb7bf477ddac974c208f8\";\r\n\r\n\r\nclass GetFiveDay extends Component {\r\n\r\n  constructor(props){\r\n    super(props);\r\n    this.state ={\r\n      list: []\r\n\r\n    }\r\n  }\r\n\r\n  getFiveDaysFunc = (e) => {\r\n    let apiString = `https://api.openweathermap.org/data/2.5/forecast?q=${this.props.name}&units=metric&appid=${keyAPI}`;\r\n    fetch(apiString)\r\n    .then(res => res.json())\r\n    .then(\r\n      (result) => {\r\n        console.log(result);\r\n        this.setState({\r\n          list: result.list,\r\n          date: result.list[0].dt_txt,\r\n          timezone: result.city.timezone\r\n        })\r\n\r\n      })\r\n      .catch(() => {\r\n      console.log(\"error\");\r\n    });\r\n}\r\n\r\ncomponentDidUpdate(prevProps){\r\n  console.log();\r\n  if (this.props.changeToggle !== prevProps.changeToggle) {\r\n    console.log(\"works\");\r\n    this.getFiveDaysFunc()\r\n }\r\n    }\r\n\r\ncomponentDidMount(){\r\n  this.getFiveDaysFunc()\r\n}\r\n\r\nrender() {\r\n  console.log(\"hi \" + this.props.changeToggle);\r\n  if (this.props.show) {\r\n    return(\r\n      <div>\r\n  \r\n    {this.state.list.map((item, index) => (\r\n\r\n      <div>\r\n        <GetFiveDayItems\r\n          item={item}\r\n          temperature={item.main.temp}\r\n          description={item.weather[0].description}\r\n          timeStamp={item.dt}\r\n          timeAdjust={this.state.timezone}\r\n\r\n        />\r\n      </div>\r\n\r\n    ))}\r\n\r\n    </div>)\r\n\r\n\r\n    }\r\n    return null\r\n  }\r\n\r\n}\r\n\r\nexport default GetFiveDay;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}